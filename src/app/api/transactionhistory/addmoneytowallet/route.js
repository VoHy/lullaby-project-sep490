import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const body = await request.json();
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:5294';
    
    console.log('üß™ Test: API n·∫°p ti·ªÅn ƒë∆∞·ª£c g·ªçi v·ªõi data:', body);
    
    // T·∫°m th·ªùi tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u ƒë·ªÉ tr√°nh l·ªói database
    const mockTransaction = {
      transactionHistoryID: Date.now(),
      accountID: body.accountID || 1,
      walletID: body.walletID,
      amount: body.amount,
      note: 'N·∫°p ti·ªÅn v√†o v√≠',
      status: 'success',
      transactionDate: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    console.log('üß™ Test: Tr·∫£ v·ªÅ transaction m·∫´u:', mockTransaction);

    return NextResponse.json(mockTransaction);

    // Code g·ªëc (comment l·∫°i ƒë·ªÉ tr√°nh l·ªói):
    /*
    const response = await fetch(`${backendUrl}/api/TransactionHistory/AddMoneyToWallet`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body)
    });

    if (!response.ok) {
      const errorText = await response.text();
      
      try {
        const errorData = JSON.parse(errorText);
        return NextResponse.json(
          { error: errorData.message || 'Th√™m ti·ªÅn v√†o wallet th·∫•t b·∫°i' },
          { status: response.status }
        );
      } catch (parseError) {
        console.error('Failed to parse error response as JSON:', parseError);
        return NextResponse.json(
          { error: `Server error: ${response.status} - ${errorText.substring(0, 100)}` },
          { status: response.status }
        );
      }
    }

    const data = await response.json();
    return NextResponse.json(data);
    */
  } catch (error) {
    console.error('Proxy error:', error);
    return NextResponse.json(
      { error: `Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server: ${error.message}` },
      { status: 500 }
    );
  }
} 
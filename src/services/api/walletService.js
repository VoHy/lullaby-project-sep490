import { createService } from './serviceFactory';

// T·∫°o base service v·ªõi factory
const baseWalletService = createService('wallet', 'Wallet', true);

// Utility function ƒë·ªÉ l·∫•y walletID m·ªôt c√°ch nh·∫•t qu√°n
const getWalletId = (wallet) => {
  return wallet?.walletID || wallet?.WalletID;
};

// Th√™m method ƒë·∫∑c bi·ªát
const walletService = {
  // Base CRUD methods t·ª´ factory
  ...baseWalletService,

  // Get all wallets
  getAllWallets: async () => {
    try {
      const res = await fetch('/api/wallet/getall', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await res.json();
      
      if (!res.ok) {
        throw new Error(data.error || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch wallets');
      }
      return data;
    } catch (error) {
      throw error;
    }
  },

  // Get wallet by ID
  getWalletById: async (walletId) => {
    const res = await fetch(`/api/wallet/${walletId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin wallet');
    return data;
  },

  // Create wallet for account
  createWallet: async (accountId) => {
    const res = await fetch(`/api/wallet/create/${accountId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({}) // Empty body as per API spec
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'T·∫°o wallet th·∫•t b·∫°i');
    return data;
  },

  // Update wallet amount
  updateWalletAmount: async (walletId, newAmount) => {
    const res = await fetch(`/api/wallet/updateamount/${walletId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: newAmount })
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞ wallet');
    return data;
  },

  // Delete wallet
  deleteWallet: async (walletId) => {
    const res = await fetch(`/api/wallet/${walletId}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'X√≥a wallet th·∫•t b·∫°i');
    return data;
  },

  // Update wallet note
  updateWalletNote: async (walletId, noteData) => {
    const res = await fetch(`/api/wallet/updatenote/${walletId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(noteData)
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'C·∫≠p nh·∫≠t ghi ch√∫ wallet th·∫•t b·∫°i');
    return data;
  },

  // Activate wallet
  activateWallet: async (walletId) => {
    const res = await fetch(`/api/wallet/active/${walletId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'K√≠ch ho·∫°t wallet th·∫•t b·∫°i');
    return data;
  },

  // Deactivate wallet
  deactivateWallet: async (walletId) => {
    const res = await fetch(`/api/wallet/inactive/${walletId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'V√¥ hi·ªáu h√≥a wallet th·∫•t b·∫°i');
    return data;
  },

  // Get wallet by account ID
  getWalletByAccountId: async (accountId) => {
    try {
      console.log('üîç WalletService: G·ªçi API l·∫•y v√≠ cho accountID:', accountId);
      const res = await fetch(`/api/wallet/getall`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!res.ok) {
        if (res.status === 404) {
          console.log('üîç WalletService: Kh√¥ng t√¨m th·∫•y v√≠ cho accountID:', accountId);
          return null;
        }
        const errorData = await res.json();
        throw new Error(errorData.error || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v√≠');
      }
      
      const wallet = await res.json();
      console.log('üîç WalletService: V√≠ t√¨m th·∫•y:', wallet);
      return wallet;
    } catch (error) {
      console.error('ÔøΩÔøΩ WalletService: L·ªói l·∫•y v√≠:', error);
      throw error;
    }
  }
};

export default walletService; 
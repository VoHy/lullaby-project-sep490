import { createService } from './serviceFactory';

// T·∫°o base service v·ªõi factory
const baseTransactionHistoryService = createService('transactionhistory', 'TransactionHistory', true);

// Th√™m method ƒë·∫∑c bi·ªát
const transactionHistoryService = {
  // Base CRUD methods t·ª´ factory
  ...baseTransactionHistoryService,

  // GET /api/TransactionHistory/GetAll
  getAllTransactionHistories: async () => {
    const res = await fetch('/api/transactionhistory/getall', {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch transaction histories');
    return data;
  },

  // GET /api/TransactionHistory/{transactionHistoryId}
  getTransactionHistoryById: async (transactionHistoryId) => {
    const res = await fetch(`/api/transactionhistory/${transactionHistoryId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin transaction history');
    return data;
  },

  // DELETE /api/TransactionHistory/{transactionHistoryId}
  deleteTransactionHistory: async (transactionHistoryId) => {
    const res = await fetch(`/api/transactionhistory/${transactionHistoryId}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'X√≥a transaction history th·∫•t b·∫°i');
    return data;
  },

  // GET /api/TransactionHistory/GetAllByAccount/{accountId}
  getAllTransactionHistoriesByAccount: async (accountId) => {
    try {
      console.log('üîç TransactionHistoryService: Fetching for account:', accountId);
      
      if (!accountId) {
        console.log('‚ö†Ô∏è No accountId provided, returning empty array');
        return [];
      }

      const res = await fetch(`/api/transactionhistory/getallbyaccount/${accountId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      console.log('üîç TransactionHistory API Response status:', res.status);

      // N·∫øu kh√¥ng t√¨m th·∫•y (404) ho·∫∑c kh√¥ng c√≥ data, tr·∫£ v·ªÅ array r·ªóng
      if (res.status === 404) {
        console.log('‚ÑπÔ∏è No transaction history found for account:', accountId);
        return [];
      }

      const data = await res.json();
      console.log('üîç TransactionHistory API Response data:', data);

      if (!res.ok) {
        console.error('‚ùå API Error:', data.error);
        // Thay v√¨ throw error, return empty array ƒë·ªÉ kh√¥ng block wallet loading
        return [];
      }

      // X·ª≠ l√Ω response data
      if (Array.isArray(data)) {
        return data;
      } else if (data && Array.isArray(data.data)) {
        return data.data;
      } else if (data && data.result) {
        return Array.isArray(data.result) ? data.result : [];
      }
      
      return [];
      
    } catch (error) {
      console.error('‚ùå Error fetching transaction histories:', error);
      // Return empty array thay v√¨ throw error ƒë·ªÉ kh√¥ng block wallet loading
      return [];
    }
  },

  // POST /api/TransactionHistory/AddMoneyToWallet
  addMoneyToWallet: async (walletData) => {
    const res = await fetch('/api/transactionhistory/addmoneytowallet', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(walletData)
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Th√™m ti·ªÅn v√†o wallet th·∫•t b·∫°i');
    return data;
  },

  // POST /api/TransactionHistory/InvoicePayment/{invoiceId}
  invoicePayment: async (invoiceId, paymentData) => {
    const res = await fetch(`/api/transactionhistory/invoicepayment/${invoiceId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(paymentData)
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Thanh to√°n invoice th·∫•t b·∫°i');
    return data;
  },

  // POST /api/TransactionHistory/RefundMoneyToWallet/{invoiceId}
  refundMoneyToWallet: async (invoiceId, refundData) => {
    const res = await fetch(`/api/transactionhistory/refundmoneytowallet/${invoiceId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(refundData)
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'Ho√†n ti·ªÅn v√†o wallet th·∫•t b·∫°i');
    return data;
  },

  // PUT /api/TransactionHistory/SuccessAddToWallet/{transactionHistoryId}
  successAddToWallet: async (transactionHistoryId) => {
    const res = await fetch(`/api/transactionhistory/successaddtowallet/${transactionHistoryId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' }
    });
    const data = await res.json();
    if (!res.ok) throw new Error(data.error || 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng th·∫•t b·∫°i');
    return data;
  }
};

export default transactionHistoryService;